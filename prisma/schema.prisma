// File ini mendefinisikan skema database Anda menggunakan Prisma.
// Ini adalah sumber kebenaran tunggal untuk struktur database aplikasi Anda.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Terhubung ke database Supabase Anda
}

// =================================================================
// MODEL UNTUK AUTENTIKASI & PENGGUNA
// =================================================================

model profiles {
  id   String   @id @db.Uuid // Kunci utama, sama dengan ID dari Supabase Auth
  name String?
  role UserRole @default(CASHIER)

  // Relasi
  transactions Transaction[]
}

enum UserRole {
  ADMIN
  CASHIER
}

// =================================================================
// MODEL UNTUK PRODUK & KATEGORI
// =================================================================

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi: Satu kategori memiliki banyak produk
  products Product[]
}

model Product {
  id        String   @id @default(cuid())
  name      String
  price     Float
  stock     Int
  sku       String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi: Produk ini milik satu kategori
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  // Relasi
  transactionItems TransactionItem[]
  stockMovements   StockMovement[]
}

// =================================================================
// MODEL UNTUK INVENTARIS & SUPPLIER
// =================================================================

model Supplier {
  id            String   @id @default(cuid())
  name          String
  contactPerson String?
  phone         String?
  address       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relasi: Satu supplier bisa memiliki banyak pergerakan stok
  stockMovements StockMovement[]
}

model StockMovement {
  id        String            @id @default(cuid())
  quantity  Int // Positif untuk stok masuk, negatif untuk keluar
  type      StockMovementType
  notes     String?
  createdAt DateTime          @default(now())

  // Relasi: Pergerakan stok ini milik satu produk
  productId String
  product   Product @relation(fields: [productId], references: [id])

  // Relasi: Stok masuk bisa berasal dari satu supplier (opsional)
  supplierId String?
  supplier   Supplier? @relation(fields: [supplierId], references: [id])
}

enum StockMovementType {
  IN
  SALE
  ADJUSTMENT
  DAMAGE
}

// =================================================================
// MODEL UNTUK TRANSAKSI & DISKON
// =================================================================

model Transaction {
  id          String        @id @default(cuid())
  totalAmount Float
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Kolom untuk integrasi payment gateway (opsional)
  snapToken     String? @unique
  paymentMethod String?

  // Relasi: Transaksi ini dibuat oleh satu kasir
  userId String   @db.Uuid
  user   profiles @relation(fields: [userId], references: [id])

  // Relasi
  items     TransactionItem[]
  discounts TransactionDiscount[]
}

model TransactionItem {
  id          String @id @default(cuid())
  quantity    Int
  priceAtSale Float // Menyimpan harga produk saat transaksi terjadi

  // Relasi
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
}

model Discount {
  id        String       @id @default(cuid())
  name      String
  type      DiscountType
  value     Float // Nilai diskon (bisa persen atau nominal)
  isActive  Boolean      @default(true)
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relasi
  appliedOnTransactions TransactionDiscount[]
}

// Tabel penghubung untuk menerapkan banyak diskon pada satu transaksi
model TransactionDiscount {
  amountDeducted Float // Jumlah potongan yang diberikan

  // Relasi
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  discountId    String
  discount      Discount    @relation(fields: [discountId], references: [id])

  // Kunci komposit untuk memastikan satu diskon hanya bisa diterapkan sekali per transaksi
  @@id([transactionId, discountId])
}

// =================================================================
// ENUM GLOBAL
// =================================================================

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
